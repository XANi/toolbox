#!/usr/bin/env perl
use strict;
use warnings;
use Carp qw(croak cluck carp confess);
use Getopt::Long qw(:config auto_help);
use File::Slurp qw(read_file);
use Pod::Usage;
use Data::Dumper;
use Term::ANSIColor;
use subs qw(load_md_info summary format_bytes add_disk);

my $cfg = { # default config values go here
};
my $help;

GetOptions(
    'debug'        => \$cfg->{'debug'},
    'help'          => \$help,
) or pod2usage(
    -verbose => 2,  #2 is "full man page" 1 is usage + options ,0/undef is only usage
    -exitval => 1,   #exit with error code if there is something wrong with arguments so anything depending on exit code fails too
);

if ($help) {
    my $msg;
    my $verbose = 2;
    pod2usage(
        -message => $msg,
        -verbose => $verbose, #exit code doesnt work with verbose > 2, it changes to 1
    );
}
my $md_status = {};
my $disk_list = {};
open(F, '<', '/proc/mdstat') or croak("$!");
while(<F>) {
    chomp;
    if ($_ =~ /^(md\d+)\s*:\s*([a-z0-9]+)\s+([a-z0-9]+)/) {
        my ($dev, $status, $level) = ( $1, $2, $3);
        $md_status->{$dev}{'array_state'} = $status;
        $md_status->{$dev}{'level'} = $level;
        load_md_info($dev,$md_status->{$dev});
        load_component_info($dev,$md_status->{$dev});
    }
}
if ($cfg->{'debug'}) {
    print Dumper $md_status;
}
summary($md_status);

sub summary {
    my $status = shift;
    while ( my ($md_name, $md) = each(%$status)) {
        if ($md->{'degraded'}) {
            print color('bold yellow')
        }
        elsif($md->{'array_state'} !~ /(active|clean)/) {
            print color('bold red')
        }
        elsif($md->{'sync_action'} eq 'resync') {
            print color('bold magenta')
        }
        elsif($md->{'mismatch_cnt'}) {
            print color('bold magenta')
        }
        elsif($md->{'sync_action'} eq 'repair') {
            print color('bold yellow')
        }
        else {
            print color('bold blue')
        }

        print "$md_name:\t"
            . "$md->{'level'}\t"
            . "[$md->{'array_state'}:$md->{'sync_action'}]\t"
            . "component: " . format_bytes($md->{'component_size'} * 1024) . "\t"
            . "";
        if ($md->{'chunk_size'}) {
            print "chunk: " . format_bytes($md->{'chunk_size'}) . "\t";
        }

        if ($md->{'mismatch_cnt'}) {
            print color('bold red') . "mismatched: $md->{'mismatch_cnt'}";
            if ($md->{'level'} eq 'raid1') {
                print color('bold white') . ' (normal if its swap/lvm+swap on RAID1)'
            }
        }
        print color('reset') . "\n";
        my $slot_to_comp = {};
        while(my ($comp_name, $comp) = each  %{ $md->{'components'} } ) {
            $slot_to_comp->{ $comp->{'slot'} } = $comp_name;
        }
        foreach my $id (sort keys %$slot_to_comp) {
            my $name = $slot_to_comp->{$id};
            my $comp = $md->{'components'}{ $name };
            print "  ";
            if ($comp->{'bad_blocks'} || $comp->{'unacknowledged_bad_blocks'}) {
                print color('bold red');
            }
            elsif ($comp->{'state'} !~ /(spare|in_sync)/ || $comp->{'errors'}) {
                print color('bold yellow')
            }
            elsif ($id !~ /\d+/) {
                print color('bold cyan');
            }
            else {
                print color('bold green');
            }
            print "$id\t$slot_to_comp->{$id}\t";
            print format_bytes($comp->{'size'} * 1024) . " \t";
            print $comp->{'state'} . "\t";
            if ( $comp->{'errors'} ) {
                print color('bold red') . "E: $comp->{'errors'}\t";
            }
            if ($comp->{'bad_blocks'}) {
                my $bb =  $comp->{'bad_blocks'};
                $bb =~ s/^(.{0,32})(.*)$/$1/;
                if (length($comp->{'bad_blocks'}) > 32) {
                    $bb .= "+++";
                }
                print color('bold red') . "BB: $bb\t"

            }

            print color('reset'). "\n";
        }
    }

    my $unused_disks = [];
    for  (glob('/sys/block/*')) {
        my ($dev) = m{/sys/block/((xv|v|s|h)d.+)};
        if (defined $dev){
            if(!defined($disk_list->{$dev})) {
                push @$unused_disks, $dev
            }
        }
    }

    if (scalar @$unused_disks > 0) {
        print color("bold yellow") . "== Unused disks ==\n";
        for my $dev (sort @$unused_disks) {
            print color("bold green") . "\t$dev\t";
            print format_bytes(512 * read_file("/sys/block/$dev/size"));
            print "\n";
        }
    }

}



sub load_md_info {
    my $md = shift;
    my $md_info = shift;
    my $path = '/sys/devices/virtual/block/' . $md . '/md';
    # file name -> var name
    my $map = {
        component_size => 'component_size',
        degraded => 'degraded',
        layout => 'layout',
        level => 'level',
        mismatch_cnt => 'mismatch_cnt',
        sync_action => 'sync_action',
        chunk_size => 'chunk_size',
        array_state => 'array_state',
        'bitmap/chunksize' => 'bitmap_chunksize',
        'bitmap/backlog' => 'bitmap_backlog',
        'bitmap/metadata' => 'bitmap_metadata',
    };
    while( my ($k, $v) = each (%{ $map }))  {
        my $f = "$path/$k";
        if ( -e $f) {
            my $t = read_file($f);
            chomp $t;
            $md_info->{$v} = $t;

        }
    }
    if ($md_info->{'level'} eq 'raid0') {
        $md_info->{'sync_action'} = 'none';
    }
}

sub format_bytes {
   my $c = shift || 0;
   $c >= 1073741824 ? sprintf("%0.2fGB", $c/1073741824)
      : $c >= 1048576 ? sprintf("%0.2fMB", $c/1048576)
      : $c >= 1024 ? sprintf("%0.0fKB", $c/1024)
      : $c . "B";
}


sub load_component_info {
    my $md = shift;
    my $md_info = shift;
    my $path = '/sys/devices/virtual/block/' . $md . '/md';
    my $map = {
        bad_blocks => 'bad_blocks',
        errors => 'errors',
        unacknowledged_bad_blocks => 'unacknowledged_bad_blocks',
        size => 'size',
        slot => 'slot',
        state => 'state',
    };
    while(glob("$path/dev-*")) {
        my $path = $_;
        my ($dev) = m{md/dev-([a-z\d]+)};
        add_disk($dev, $md);
        $md_info->{'components'}{$dev} ||= {};
        my $comp = $md_info->{'components'}{$dev};
        while( my ($k, $v) = each (%{ $map }))  {
            my $f = "$path/$k";
            if ( -e $f) {
                my $t = read_file($f);
                chomp $t;
                $comp->{$v} = $t;
            }
        }
    }
}

sub add_disk {
    my $dev = shift;
    my $md = shift;
    $dev =~ s/\d+$//g;
    $disk_list->{$dev} ||= [];
    push @{ $disk_list->{$dev} }, $md;
}
 #   my $disk_list = {};


__END__

=head1 NAME

foobar - get foo from bar

=head1 SYNOPSIS

foobar --option1 val1

=head1 DESCRIPTION

Does foo to bar

=head1 OPTIONS

parameters can be shortened if unique, like  --add -> -a

=over 4

=item B<--option1> val2

sets option1 to val2. Default is val1

=item B<--help>

display full help

=back

=head1 EXAMPLES

=over 4

=item B<foobar>

Does foo to bar with defaults

=item B<foobar --bar bar2>

Does foo to specified bar

=back

=cut
